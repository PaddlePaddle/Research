============================= test session starts ==============================
platform darwin -- Python 3.8.12, pytest-7.1.2, pluggy-1.0.0
rootdir: /Users/sun/Projects/oix/baidu/ccl/paddlemetric/src/tests/bases
plugins: hydra-core-1.1.0.dev5
collected 86 items

test_composition.py .....FFF.....FF.................FFFFFFFFFFFFFF.F....FFFFF.FFFFFFFFFFFFFFFFFF.F....FF..

=================================== FAILURES ===================================
_____________________ test_metrics_and[3-expected_result1] _____________________

second_operand = 3
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [(DummyMetric(3), tensor(2)), (3, tensor(2)), (3, tensor(2)), (tensor(3), tensor(2))],
    )
    @pytest.mark.skipif(**_MARK_TORCH_MIN_1_5)
    def test_metrics_and(second_operand, expected_result):
        first_metric = DummyMetric(2)
    
        final_and = first_metric & second_operand
        final_rand = second_operand & first_metric
    
        assert isinstance(final_and, CompositionalMetric)
        assert isinstance(final_rand, CompositionalMetric)
    
        final_and.update()
        final_rand.update()
>       assert B.allclose(expected_result, final_and.compute())

test_composition.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:378: in wrapped_func
    self._computed = compute(*args, **kwargs)
../../paddlemetrics/metric.py:756: in compute
    return self.op(val_a, val_b)
../../../../../../torch2paddle/paddleext/torchapi/core.py:91: in paddle_func
    return func(*args, **kwargs)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/logic.py:559: in bitwise_and
    return _bitwise_op(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op_name = 'bitwise_and'
x = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)
y = 3, out = None, name = None, binary_op = True

    def _bitwise_op(op_name, x, y, out=None, name=None, binary_op=True):
        if paddle.in_dynamic_mode():
            op = getattr(_C_ops, op_name)
            if binary_op:
>               return op(x, y)
E               ValueError: (InvalidArgument) bitwise_and(): argument 'Y' (position 1) must be Tensor, but got int (at /Users/paddle/work/pengyuqi/Paddle/paddle/fluid/pybind/op_function_common.cc:737)

/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/logic.py:505: ValueError
_____________________ test_metrics_and[3-expected_result2] _____________________

second_operand = 3
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [(DummyMetric(3), tensor(2)), (3, tensor(2)), (3, tensor(2)), (tensor(3), tensor(2))],
    )
    @pytest.mark.skipif(**_MARK_TORCH_MIN_1_5)
    def test_metrics_and(second_operand, expected_result):
        first_metric = DummyMetric(2)
    
        final_and = first_metric & second_operand
        final_rand = second_operand & first_metric
    
        assert isinstance(final_and, CompositionalMetric)
        assert isinstance(final_rand, CompositionalMetric)
    
        final_and.update()
        final_rand.update()
>       assert B.allclose(expected_result, final_and.compute())

test_composition.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:378: in wrapped_func
    self._computed = compute(*args, **kwargs)
../../paddlemetrics/metric.py:756: in compute
    return self.op(val_a, val_b)
../../../../../../torch2paddle/paddleext/torchapi/core.py:91: in paddle_func
    return func(*args, **kwargs)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/logic.py:559: in bitwise_and
    return _bitwise_op(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op_name = 'bitwise_and'
x = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)
y = 3, out = None, name = None, binary_op = True

    def _bitwise_op(op_name, x, y, out=None, name=None, binary_op=True):
        if paddle.in_dynamic_mode():
            op = getattr(_C_ops, op_name)
            if binary_op:
>               return op(x, y)
E               ValueError: (InvalidArgument) bitwise_and(): argument 'Y' (position 1) must be Tensor, but got int (at /Users/paddle/work/pengyuqi/Paddle/paddle/fluid/pybind/op_function_common.cc:737)

/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/logic.py:505: ValueError
______________ test_metrics_and[second_operand3-expected_result3] ______________

second_operand = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       3)
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [(DummyMetric(3), tensor(2)), (3, tensor(2)), (3, tensor(2)), (tensor(3), tensor(2))],
    )
    @pytest.mark.skipif(**_MARK_TORCH_MIN_1_5)
    def test_metrics_and(second_operand, expected_result):
        first_metric = DummyMetric(2)
    
        final_and = first_metric & second_operand
>       final_rand = second_operand & first_metric

test_composition.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../../../torch2paddle/paddleext/torchapi/tensor_.py:361: in __and__
    return paddle.logical_or(self.bool(), other.bool())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = DummyMetric(), name = 'bool'

    def __getattr__(self, name):
        if '_parameters' in self.__dict__:
            _parameters = self.__dict__['_parameters']
            if name in self._parameters:
                if in_declarative_mode():
                    return _convert_into_variable(self._parameters[name])
                return self._parameters[name]
        if '_sub_layers' in self.__dict__:
            _sub_layers = self.__dict__['_sub_layers']
            if name in self._sub_layers:
                return self._sub_layers[name]
        if '_buffers' in self.__dict__:
            _buffers = self.__dict__['_buffers']
            if name in _buffers:
                if in_declarative_mode():
                    return _convert_into_variable(_buffers[name])
                return _buffers[name]
>       return object.__getattribute__(self, name)
E       AttributeError: 'DummyMetric' object has no attribute 'bool'

/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py:1123: AttributeError
__________________ test_metrics_floordiv[2-expected_result1] ___________________

second_operand = 2
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(2), tensor(2)),
            (2, tensor(2)),
            (2.0, tensor(2.0)),
            (tensor(2), tensor(2)),
        ],
    )
    @pytest.mark.skipif(**_MARK_TORCH_MIN_1_5)
    def test_metrics_floordiv(second_operand, expected_result):
        first_metric = DummyMetric(5)
    
        final_floordiv = first_metric // second_operand
    
        assert isinstance(final_floordiv, CompositionalMetric)
    
        final_floordiv.update()
>       assert B.allclose(expected_result, final_floordiv.compute())

test_composition.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:378: in wrapped_func
    self._computed = compute(*args, **kwargs)
../../paddlemetrics/metric.py:756: in compute
    return self.op(val_a, val_b)
../../../../../../torch2paddle/paddleext/torchapi/core.py:91: in paddle_func
    return func(*args, **kwargs)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/math.py:460: in floor_divide
    return _elementwise_op_in_dygraph(
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/decorator.py:232: in fun
    return caller(func, *(extras + args), **kw)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/wrapped_decorator.py:25: in __impl__
    return wrapped_func(*args, **kwargs)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/framework.py:434: in __impl__
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       5)
y = 2, axis = -1, act = None, use_mkldnn = False
op_name = 'elementwise_floordiv'

    @dygraph_only
    def _elementwise_op_in_dygraph(x,
                                   y,
                                   axis=-1,
                                   act=None,
                                   use_mkldnn=False,
                                   op_name=None):
        def is_inplace(op_name):
            return  op_name[-1] == "_"
    
        if op_name not in OP_NAMEMAPPING.keys():
            op = getattr(_C_ops, op_name)
            out = op(x, y, 'axis', axis, 'use_mkldnn', use_mkldnn)
        else:
            if in_dygraph_mode():
                op = getattr(_C_ops, OP_NAMEMAPPING[op_name] if not is_inplace(op_name) else op_name)
                out = op(x, y)
    
            if _in_legacy_dygraph():
                op = getattr(_C_ops, op_name)
>               out = op(x, y, 'axis', axis, 'use_mkldnn', use_mkldnn)
E               ValueError: (InvalidArgument) elementwise_floordiv(): argument 'Y' (position 1) must be Tensor, but got int (at /Users/paddle/work/pengyuqi/Paddle/paddle/fluid/pybind/op_function_common.cc:737)

/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/math.py:218: ValueError
_________________ test_metrics_floordiv[2.0-expected_result2] __________________

second_operand = 2.0
expected_result = Tensor(shape=[], dtype=float32, place=Place(cpu), stop_gradient=True,
       2.)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(2), tensor(2)),
            (2, tensor(2)),
            (2.0, tensor(2.0)),
            (tensor(2), tensor(2)),
        ],
    )
    @pytest.mark.skipif(**_MARK_TORCH_MIN_1_5)
    def test_metrics_floordiv(second_operand, expected_result):
        first_metric = DummyMetric(5)
    
        final_floordiv = first_metric // second_operand
    
        assert isinstance(final_floordiv, CompositionalMetric)
    
        final_floordiv.update()
>       assert B.allclose(expected_result, final_floordiv.compute())

test_composition.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:378: in wrapped_func
    self._computed = compute(*args, **kwargs)
../../paddlemetrics/metric.py:756: in compute
    return self.op(val_a, val_b)
../../../../../../torch2paddle/paddleext/torchapi/core.py:91: in paddle_func
    return func(*args, **kwargs)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/math.py:460: in floor_divide
    return _elementwise_op_in_dygraph(
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/decorator.py:232: in fun
    return caller(func, *(extras + args), **kw)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/wrapped_decorator.py:25: in __impl__
    return wrapped_func(*args, **kwargs)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/framework.py:434: in __impl__
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       5)
y = 2.0, axis = -1, act = None, use_mkldnn = False
op_name = 'elementwise_floordiv'

    @dygraph_only
    def _elementwise_op_in_dygraph(x,
                                   y,
                                   axis=-1,
                                   act=None,
                                   use_mkldnn=False,
                                   op_name=None):
        def is_inplace(op_name):
            return  op_name[-1] == "_"
    
        if op_name not in OP_NAMEMAPPING.keys():
            op = getattr(_C_ops, op_name)
            out = op(x, y, 'axis', axis, 'use_mkldnn', use_mkldnn)
        else:
            if in_dygraph_mode():
                op = getattr(_C_ops, OP_NAMEMAPPING[op_name] if not is_inplace(op_name) else op_name)
                out = op(x, y)
    
            if _in_legacy_dygraph():
                op = getattr(_C_ops, op_name)
>               out = op(x, y, 'axis', axis, 'use_mkldnn', use_mkldnn)
E               ValueError: (InvalidArgument) elementwise_floordiv(): argument 'Y' (position 1) must be Tensor, but got float (at /Users/paddle/work/pengyuqi/Paddle/paddle/fluid/pybind/op_function_common.cc:737)

/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/math.py:218: ValueError
____________ test_metrics_matmul[second_operand0-expected_result0] _____________

second_operand = DummyMetric()
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       12)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [(DummyMetric([2, 2, 2]), tensor(12)), (tensor([2, 2, 2]), tensor(12))],
    )
    def test_metrics_matmul(second_operand, expected_result):
        first_metric = DummyMetric([2, 2, 2])
    
        final_matmul = first_metric @ second_operand
    
        assert isinstance(final_matmul, CompositionalMetric)
    
        final_matmul.update()
>       assert B.allclose(expected_result, final_matmul.compute())

test_composition.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:378: in wrapped_func
    self._computed = compute(*args, **kwargs)
../../paddlemetrics/metric.py:756: in compute
    return self.op(val_a, val_b)
../../../../../../torch2paddle/paddleext/torchapi/core.py:91: in paddle_func
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = Tensor(shape=[3], dtype=int64, place=Place(cpu), stop_gradient=True,
       [2, 2, 2])
y = Tensor(shape=[3], dtype=int64, place=Place(cpu), stop_gradient=True,
       [2, 2, 2])
transpose_x = False, transpose_y = False, name = None

    def matmul(x, y, transpose_x=False, transpose_y=False, name=None):
        """
        Applies matrix multiplication to two tensors. `matmul` follows
        the complete broadcast rules,
        and its behavior is consistent with `np.matmul`.
    
        Currently, the input tensors' number of dimensions can be any, `matmul` can be used to
        achieve the `dot`, `matmul` and `batchmatmul`.
    
        The actual behavior depends on the shapes of :math:`x`, :math:`y` and the
        flag values of :attr:`transpose_x`, :attr:`transpose_y`. Specifically:
    
        - If a transpose flag is specified, the last two dimensions of the tensor
          are transposed. If the tensor is ndim-1 of shape, the transpose is invalid. If the tensor
          is ndim-1 of shape :math:`[D]`, then for :math:`x` it is treated as :math:`[1, D]`, whereas
          for :math:`y` it is the opposite: It is treated as :math:`[D, 1]`.
    
        The multiplication behavior depends on the dimensions of `x` and `y`. Specifically:
    
        - If both tensors are 1-dimensional, the dot product result is obtained.
    
        - If both tensors are 2-dimensional, the matrix-matrix product is obtained.
    
        - If the `x` is 1-dimensional and the `y` is 2-dimensional,
          a `1` is prepended to its dimension in order to conduct the matrix multiply.
          After the matrix multiply, the prepended dimension is removed.
    
        - If the `x` is 2-dimensional and `y` is 1-dimensional,
          the matrix-vector product is obtained.
    
        - If both arguments are at least 1-dimensional and at least one argument
          is N-dimensional (where N > 2), then a batched matrix multiply is obtained.
          If the first argument is 1-dimensional, a 1 is prepended to its dimension
          in order to conduct the batched matrix multiply and removed after.
          If the second argument is 1-dimensional, a 1 is appended to its
          dimension for the purpose of the batched matrix multiple and removed after.
          The non-matrix (exclude the last two dimensions) dimensions are
          broadcasted according the broadcast rule.
          For example, if input is a (j, 1, n, m) tensor and the other is a (k, m, p) tensor,
          out will be a (j, k, n, p) tensor.
    
        Args:
            x (Tensor): The input tensor which is a Tensor.
            y (Tensor): The input tensor which is a Tensor.
            transpose_x (bool): Whether to transpose :math:`x` before multiplication.
            transpose_y (bool): Whether to transpose :math:`y` before multiplication.
            name(str|None): A name for this layer(optional). If set None, the layer
                will be named automatically.
    
        Returns:
            Tensor: The output Tensor.
    
        Examples:
    
        .. code-block:: python
    
            import paddle
            import numpy as np
    
            # vector * vector
            x_data = np.random.random([10]).astype(np.float32)
            y_data = np.random.random([10]).astype(np.float32)
            x = paddle.to_tensor(x_data)
            y = paddle.to_tensor(y_data)
            z = paddle.matmul(x, y)
            print(z.numpy().shape)
            # [1]
    
            # matrix * vector
            x_data = np.random.random([10, 5]).astype(np.float32)
            y_data = np.random.random([5]).astype(np.float32)
            x = paddle.to_tensor(x_data)
            y = paddle.to_tensor(y_data)
            z = paddle.matmul(x, y)
            print(z.numpy().shape)
            # [10]
    
            # batched matrix * broadcasted vector
            x_data = np.random.random([10, 5, 2]).astype(np.float32)
            y_data = np.random.random([2]).astype(np.float32)
            x = paddle.to_tensor(x_data)
            y = paddle.to_tensor(y_data)
            z = paddle.matmul(x, y)
            print(z.numpy().shape)
            # [10, 5]
    
            # batched matrix * batched matrix
            x_data = np.random.random([10, 5, 2]).astype(np.float32)
            y_data = np.random.random([10, 2, 5]).astype(np.float32)
            x = paddle.to_tensor(x_data)
            y = paddle.to_tensor(y_data)
            z = paddle.matmul(x, y)
            print(z.numpy().shape)
            # [10, 5, 5]
    
            # batched matrix * broadcasted matrix
            x_data = np.random.random([10, 1, 5, 2]).astype(np.float32)
            y_data = np.random.random([1, 3, 2, 5]).astype(np.float32)
            x = paddle.to_tensor(x_data)
            y = paddle.to_tensor(y_data)
            z = paddle.matmul(x, y)
            print(z.numpy().shape)
            # [10, 3, 5, 5]
    
        """
        if in_dygraph_mode():
            return _C_ops.final_state_matmul(x, y, transpose_x, transpose_y)
    
        if _in_legacy_dygraph():
            op_type = 'matmul_v2'
            op = getattr(_C_ops, op_type)
>           return op(x, y, 'trans_x', transpose_x, 'trans_y', transpose_y)
E           RuntimeError: (NotFound) There are no kernels which are registered in the matmul_v2 operator.
E             [Hint: Expected kernels_iter != all_op_kernels.end(), but received kernels_iter == all_op_kernels.end().] (at /Users/paddle/work/pengyuqi/Paddle/paddle/fluid/imperative/prepared_operator.cc:327)
E             [operator < matmul_v2 > error]

/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/linalg.py:145: RuntimeError
____________ test_metrics_matmul[second_operand1-expected_result1] _____________

second_operand = Tensor(shape=[3], dtype=int64, place=Place(cpu), stop_gradient=True,
       [2, 2, 2])
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       12)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [(DummyMetric([2, 2, 2]), tensor(12)), (tensor([2, 2, 2]), tensor(12))],
    )
    def test_metrics_matmul(second_operand, expected_result):
        first_metric = DummyMetric([2, 2, 2])
    
        final_matmul = first_metric @ second_operand
    
        assert isinstance(final_matmul, CompositionalMetric)
    
        final_matmul.update()
>       assert B.allclose(expected_result, final_matmul.compute())

test_composition.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:378: in wrapped_func
    self._computed = compute(*args, **kwargs)
../../paddlemetrics/metric.py:756: in compute
    return self.op(val_a, val_b)
../../../../../../torch2paddle/paddleext/torchapi/core.py:91: in paddle_func
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = Tensor(shape=[3], dtype=int64, place=Place(cpu), stop_gradient=True,
       [2, 2, 2])
y = Tensor(shape=[3], dtype=int64, place=Place(cpu), stop_gradient=True,
       [2, 2, 2])
transpose_x = False, transpose_y = False, name = None

    def matmul(x, y, transpose_x=False, transpose_y=False, name=None):
        """
        Applies matrix multiplication to two tensors. `matmul` follows
        the complete broadcast rules,
        and its behavior is consistent with `np.matmul`.
    
        Currently, the input tensors' number of dimensions can be any, `matmul` can be used to
        achieve the `dot`, `matmul` and `batchmatmul`.
    
        The actual behavior depends on the shapes of :math:`x`, :math:`y` and the
        flag values of :attr:`transpose_x`, :attr:`transpose_y`. Specifically:
    
        - If a transpose flag is specified, the last two dimensions of the tensor
          are transposed. If the tensor is ndim-1 of shape, the transpose is invalid. If the tensor
          is ndim-1 of shape :math:`[D]`, then for :math:`x` it is treated as :math:`[1, D]`, whereas
          for :math:`y` it is the opposite: It is treated as :math:`[D, 1]`.
    
        The multiplication behavior depends on the dimensions of `x` and `y`. Specifically:
    
        - If both tensors are 1-dimensional, the dot product result is obtained.
    
        - If both tensors are 2-dimensional, the matrix-matrix product is obtained.
    
        - If the `x` is 1-dimensional and the `y` is 2-dimensional,
          a `1` is prepended to its dimension in order to conduct the matrix multiply.
          After the matrix multiply, the prepended dimension is removed.
    
        - If the `x` is 2-dimensional and `y` is 1-dimensional,
          the matrix-vector product is obtained.
    
        - If both arguments are at least 1-dimensional and at least one argument
          is N-dimensional (where N > 2), then a batched matrix multiply is obtained.
          If the first argument is 1-dimensional, a 1 is prepended to its dimension
          in order to conduct the batched matrix multiply and removed after.
          If the second argument is 1-dimensional, a 1 is appended to its
          dimension for the purpose of the batched matrix multiple and removed after.
          The non-matrix (exclude the last two dimensions) dimensions are
          broadcasted according the broadcast rule.
          For example, if input is a (j, 1, n, m) tensor and the other is a (k, m, p) tensor,
          out will be a (j, k, n, p) tensor.
    
        Args:
            x (Tensor): The input tensor which is a Tensor.
            y (Tensor): The input tensor which is a Tensor.
            transpose_x (bool): Whether to transpose :math:`x` before multiplication.
            transpose_y (bool): Whether to transpose :math:`y` before multiplication.
            name(str|None): A name for this layer(optional). If set None, the layer
                will be named automatically.
    
        Returns:
            Tensor: The output Tensor.
    
        Examples:
    
        .. code-block:: python
    
            import paddle
            import numpy as np
    
            # vector * vector
            x_data = np.random.random([10]).astype(np.float32)
            y_data = np.random.random([10]).astype(np.float32)
            x = paddle.to_tensor(x_data)
            y = paddle.to_tensor(y_data)
            z = paddle.matmul(x, y)
            print(z.numpy().shape)
            # [1]
    
            # matrix * vector
            x_data = np.random.random([10, 5]).astype(np.float32)
            y_data = np.random.random([5]).astype(np.float32)
            x = paddle.to_tensor(x_data)
            y = paddle.to_tensor(y_data)
            z = paddle.matmul(x, y)
            print(z.numpy().shape)
            # [10]
    
            # batched matrix * broadcasted vector
            x_data = np.random.random([10, 5, 2]).astype(np.float32)
            y_data = np.random.random([2]).astype(np.float32)
            x = paddle.to_tensor(x_data)
            y = paddle.to_tensor(y_data)
            z = paddle.matmul(x, y)
            print(z.numpy().shape)
            # [10, 5]
    
            # batched matrix * batched matrix
            x_data = np.random.random([10, 5, 2]).astype(np.float32)
            y_data = np.random.random([10, 2, 5]).astype(np.float32)
            x = paddle.to_tensor(x_data)
            y = paddle.to_tensor(y_data)
            z = paddle.matmul(x, y)
            print(z.numpy().shape)
            # [10, 5, 5]
    
            # batched matrix * broadcasted matrix
            x_data = np.random.random([10, 1, 5, 2]).astype(np.float32)
            y_data = np.random.random([1, 3, 2, 5]).astype(np.float32)
            x = paddle.to_tensor(x_data)
            y = paddle.to_tensor(y_data)
            z = paddle.matmul(x, y)
            print(z.numpy().shape)
            # [10, 3, 5, 5]
    
        """
        if in_dygraph_mode():
            return _C_ops.final_state_matmul(x, y, transpose_x, transpose_y)
    
        if _in_legacy_dygraph():
            op_type = 'matmul_v2'
            op = getattr(_C_ops, op_type)
>           return op(x, y, 'trans_x', transpose_x, 'trans_y', transpose_y)
E           RuntimeError: (NotFound) There are no kernels which are registered in the matmul_v2 operator.
E             [Hint: Expected kernels_iter != all_op_kernels.end(), but received kernels_iter == all_op_kernels.end().] (at /Users/paddle/work/pengyuqi/Paddle/paddle/fluid/imperative/prepared_operator.cc:327)
E             [operator < matmul_v2 > error]

/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/linalg.py:145: RuntimeError
______________ test_metrics_mod[second_operand0-expected_result0] ______________

second_operand = DummyMetric()
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       1)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(2), tensor(1)),
            (2, tensor(1)),
            (2.0, tensor(1)),
            (tensor(2), tensor(1)),
        ],
    )
    def test_metrics_mod(second_operand, expected_result):
        first_metric = DummyMetric(5)
    
>       final_mod = first_metric % second_operand

test_composition.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:616: in __mod__
    return CompositionalMetric(B.fmod, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('fmod',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'fmod'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
_____________________ test_metrics_mod[2-expected_result1] _____________________

second_operand = 2
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       1)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(2), tensor(1)),
            (2, tensor(1)),
            (2.0, tensor(1)),
            (tensor(2), tensor(1)),
        ],
    )
    def test_metrics_mod(second_operand, expected_result):
        first_metric = DummyMetric(5)
    
>       final_mod = first_metric % second_operand

test_composition.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:616: in __mod__
    return CompositionalMetric(B.fmod, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('fmod',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'fmod'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
____________________ test_metrics_mod[2.0-expected_result2] ____________________

second_operand = 2.0
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       1)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(2), tensor(1)),
            (2, tensor(1)),
            (2.0, tensor(1)),
            (tensor(2), tensor(1)),
        ],
    )
    def test_metrics_mod(second_operand, expected_result):
        first_metric = DummyMetric(5)
    
>       final_mod = first_metric % second_operand

test_composition.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:616: in __mod__
    return CompositionalMetric(B.fmod, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('fmod',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'fmod'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
______________ test_metrics_mod[second_operand3-expected_result3] ______________

second_operand = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       1)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(2), tensor(1)),
            (2, tensor(1)),
            (2.0, tensor(1)),
            (tensor(2), tensor(1)),
        ],
    )
    def test_metrics_mod(second_operand, expected_result):
        first_metric = DummyMetric(5)
    
>       final_mod = first_metric % second_operand

test_composition.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:616: in __mod__
    return CompositionalMetric(B.fmod, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('fmod',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'fmod'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
______________ test_metrics_mul[second_operand0-expected_result0] ______________

second_operand = DummyMetric()
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       4)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(2), tensor(4)),
            (2, tensor(4)),
            (2.0, tensor(4.0)),
            pytest.param(tensor(2), tensor(4), marks=pytest.mark.skipif(**_MARK_TORCH_MIN_1_4)),
        ],
    )
    def test_metrics_mul(second_operand, expected_result):
        first_metric = DummyMetric(2)
    
>       final_mul = first_metric * second_operand

test_composition.py:261: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:619: in __mul__
    return CompositionalMetric(B.mul, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('mul',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'mul'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
_____________________ test_metrics_mul[2-expected_result1] _____________________

second_operand = 2
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       4)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(2), tensor(4)),
            (2, tensor(4)),
            (2.0, tensor(4.0)),
            pytest.param(tensor(2), tensor(4), marks=pytest.mark.skipif(**_MARK_TORCH_MIN_1_4)),
        ],
    )
    def test_metrics_mul(second_operand, expected_result):
        first_metric = DummyMetric(2)
    
>       final_mul = first_metric * second_operand

test_composition.py:261: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:619: in __mul__
    return CompositionalMetric(B.mul, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('mul',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'mul'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
____________________ test_metrics_mul[2.0-expected_result2] ____________________

second_operand = 2.0
expected_result = Tensor(shape=[], dtype=float32, place=Place(cpu), stop_gradient=True,
       4.)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(2), tensor(4)),
            (2, tensor(4)),
            (2.0, tensor(4.0)),
            pytest.param(tensor(2), tensor(4), marks=pytest.mark.skipif(**_MARK_TORCH_MIN_1_4)),
        ],
    )
    def test_metrics_mul(second_operand, expected_result):
        first_metric = DummyMetric(2)
    
>       final_mul = first_metric * second_operand

test_composition.py:261: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:619: in __mul__
    return CompositionalMetric(B.mul, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('mul',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'mul'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
______________ test_metrics_mul[second_operand3-expected_result3] ______________

second_operand = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       4)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(2), tensor(4)),
            (2, tensor(4)),
            (2.0, tensor(4.0)),
            pytest.param(tensor(2), tensor(4), marks=pytest.mark.skipif(**_MARK_TORCH_MIN_1_4)),
        ],
    )
    def test_metrics_mul(second_operand, expected_result):
        first_metric = DummyMetric(2)
    
>       final_mul = first_metric * second_operand

test_composition.py:261: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:619: in __mul__
    return CompositionalMetric(B.mul, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('mul',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'mul'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
______________ test_metrics_ne[second_operand0-expected_result0] _______________

second_operand = DummyMetric()
expected_result = Tensor(shape=[], dtype=bool, place=Place(cpu), stop_gradient=True,
       False)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(2), tensor(False)),
            (2, tensor(False)),
            (2.0, tensor(False)),
            (tensor(2), tensor(False)),
        ],
    )
    def test_metrics_ne(second_operand, expected_result):
        first_metric = DummyMetric(2)
    
>       final_ne = first_metric != second_operand

test_composition.py:285: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:623: in __ne__
    return CompositionalMetric(B.ne, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('ne',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'ne'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
_____________________ test_metrics_ne[2-expected_result1] ______________________

second_operand = 2
expected_result = Tensor(shape=[], dtype=bool, place=Place(cpu), stop_gradient=True,
       False)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(2), tensor(False)),
            (2, tensor(False)),
            (2.0, tensor(False)),
            (tensor(2), tensor(False)),
        ],
    )
    def test_metrics_ne(second_operand, expected_result):
        first_metric = DummyMetric(2)
    
>       final_ne = first_metric != second_operand

test_composition.py:285: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:623: in __ne__
    return CompositionalMetric(B.ne, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('ne',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'ne'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
____________________ test_metrics_ne[2.0-expected_result2] _____________________

second_operand = 2.0
expected_result = Tensor(shape=[], dtype=bool, place=Place(cpu), stop_gradient=True,
       False)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(2), tensor(False)),
            (2, tensor(False)),
            (2.0, tensor(False)),
            (tensor(2), tensor(False)),
        ],
    )
    def test_metrics_ne(second_operand, expected_result):
        first_metric = DummyMetric(2)
    
>       final_ne = first_metric != second_operand

test_composition.py:285: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:623: in __ne__
    return CompositionalMetric(B.ne, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('ne',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'ne'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
______________ test_metrics_ne[second_operand3-expected_result3] _______________

second_operand = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)
expected_result = Tensor(shape=[], dtype=bool, place=Place(cpu), stop_gradient=True,
       False)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(2), tensor(False)),
            (2, tensor(False)),
            (2.0, tensor(False)),
            (tensor(2), tensor(False)),
        ],
    )
    def test_metrics_ne(second_operand, expected_result):
        first_metric = DummyMetric(2)
    
>       final_ne = first_metric != second_operand

test_composition.py:285: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:623: in __ne__
    return CompositionalMetric(B.ne, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('ne',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'ne'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
______________ test_metrics_or[second_operand1-expected_result1] _______________

second_operand = Tensor(shape=[3], dtype=int64, place=Place(cpu), stop_gradient=True,
       [1, 0, 3])
expected_result = Tensor(shape=[3], dtype=int64, place=Place(cpu), stop_gradient=True,
       [-1, -2,  3])

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [(DummyMetric([1, 0, 3]), tensor([-1, -2, 3])), (tensor([1, 0, 3]), tensor([-1, -2, 3]))],
    )
    @pytest.mark.skipif(**_MARK_TORCH_MIN_1_5)
    def test_metrics_or(second_operand, expected_result):
        first_metric = DummyMetric([-1, -2, 3])
    
        final_or = first_metric | second_operand
>       final_ror = second_operand | first_metric

test_composition.py:303: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../../../torch2paddle/paddleext/torchapi/tensor_.py:357: in __or__
    return paddle.logical_or(self.bool(), other.bool())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = DummyMetric(), name = 'bool'

    def __getattr__(self, name):
        if '_parameters' in self.__dict__:
            _parameters = self.__dict__['_parameters']
            if name in self._parameters:
                if in_declarative_mode():
                    return _convert_into_variable(self._parameters[name])
                return self._parameters[name]
        if '_sub_layers' in self.__dict__:
            _sub_layers = self.__dict__['_sub_layers']
            if name in self._sub_layers:
                return self._sub_layers[name]
        if '_buffers' in self.__dict__:
            _buffers = self.__dict__['_buffers']
            if name in _buffers:
                if in_declarative_mode():
                    return _convert_into_variable(_buffers[name])
                return _buffers[name]
>       return object.__getattribute__(self, name)
E       AttributeError: 'DummyMetric' object has no attribute 'bool'

/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py:1123: AttributeError
__________________ test_metrics_rfloordiv[5-expected_result0] __________________

first_operand = 5
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)

    @pytest.mark.parametrize(
        ["first_operand", "expected_result"],
        [(5, tensor(2)), (5.0, tensor(2.0)), (tensor(5), tensor(2))],
    )
    @pytest.mark.skipif(**_MARK_TORCH_MIN_1_5)
    def test_metrics_rfloordiv(first_operand, expected_result):
        second_operand = DummyMetric(2)
    
        final_rfloordiv = first_operand // second_operand
    
        assert isinstance(final_rfloordiv, CompositionalMetric)
    
        final_rfloordiv.update()
>       assert B.allclose(expected_result, final_rfloordiv.compute())

test_composition.py:347: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:378: in wrapped_func
    self._computed = compute(*args, **kwargs)
../../paddlemetrics/metric.py:756: in compute
    return self.op(val_a, val_b)
../../../../../../torch2paddle/paddleext/torchapi/core.py:91: in paddle_func
    return func(*args, **kwargs)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/math.py:460: in floor_divide
    return _elementwise_op_in_dygraph(
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/decorator.py:232: in fun
    return caller(func, *(extras + args), **kw)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/wrapped_decorator.py:25: in __impl__
    return wrapped_func(*args, **kwargs)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/framework.py:434: in __impl__
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = 5
y = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)
axis = -1, act = None, use_mkldnn = False, op_name = 'elementwise_floordiv'

    @dygraph_only
    def _elementwise_op_in_dygraph(x,
                                   y,
                                   axis=-1,
                                   act=None,
                                   use_mkldnn=False,
                                   op_name=None):
        def is_inplace(op_name):
            return  op_name[-1] == "_"
    
        if op_name not in OP_NAMEMAPPING.keys():
            op = getattr(_C_ops, op_name)
            out = op(x, y, 'axis', axis, 'use_mkldnn', use_mkldnn)
        else:
            if in_dygraph_mode():
                op = getattr(_C_ops, OP_NAMEMAPPING[op_name] if not is_inplace(op_name) else op_name)
                out = op(x, y)
    
            if _in_legacy_dygraph():
                op = getattr(_C_ops, op_name)
>               out = op(x, y, 'axis', axis, 'use_mkldnn', use_mkldnn)
E               ValueError: (InvalidArgument) elementwise_floordiv(): argument 'X' (position 0) must be Tensor, but got int (at /Users/paddle/work/pengyuqi/Paddle/paddle/fluid/pybind/op_function_common.cc:737)

/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/math.py:218: ValueError
_________________ test_metrics_rfloordiv[5.0-expected_result1] _________________

first_operand = 5.0
expected_result = Tensor(shape=[], dtype=float32, place=Place(cpu), stop_gradient=True,
       2.)

    @pytest.mark.parametrize(
        ["first_operand", "expected_result"],
        [(5, tensor(2)), (5.0, tensor(2.0)), (tensor(5), tensor(2))],
    )
    @pytest.mark.skipif(**_MARK_TORCH_MIN_1_5)
    def test_metrics_rfloordiv(first_operand, expected_result):
        second_operand = DummyMetric(2)
    
        final_rfloordiv = first_operand // second_operand
    
        assert isinstance(final_rfloordiv, CompositionalMetric)
    
        final_rfloordiv.update()
>       assert B.allclose(expected_result, final_rfloordiv.compute())

test_composition.py:347: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:378: in wrapped_func
    self._computed = compute(*args, **kwargs)
../../paddlemetrics/metric.py:756: in compute
    return self.op(val_a, val_b)
../../../../../../torch2paddle/paddleext/torchapi/core.py:91: in paddle_func
    return func(*args, **kwargs)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/math.py:460: in floor_divide
    return _elementwise_op_in_dygraph(
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/decorator.py:232: in fun
    return caller(func, *(extras + args), **kw)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/wrapped_decorator.py:25: in __impl__
    return wrapped_func(*args, **kwargs)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/framework.py:434: in __impl__
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = 5.0
y = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)
axis = -1, act = None, use_mkldnn = False, op_name = 'elementwise_floordiv'

    @dygraph_only
    def _elementwise_op_in_dygraph(x,
                                   y,
                                   axis=-1,
                                   act=None,
                                   use_mkldnn=False,
                                   op_name=None):
        def is_inplace(op_name):
            return  op_name[-1] == "_"
    
        if op_name not in OP_NAMEMAPPING.keys():
            op = getattr(_C_ops, op_name)
            out = op(x, y, 'axis', axis, 'use_mkldnn', use_mkldnn)
        else:
            if in_dygraph_mode():
                op = getattr(_C_ops, OP_NAMEMAPPING[op_name] if not is_inplace(op_name) else op_name)
                out = op(x, y)
    
            if _in_legacy_dygraph():
                op = getattr(_C_ops, op_name)
>               out = op(x, y, 'axis', axis, 'use_mkldnn', use_mkldnn)
E               ValueError: (InvalidArgument) elementwise_floordiv(): argument 'X' (position 0) must be Tensor, but got float (at /Users/paddle/work/pengyuqi/Paddle/paddle/fluid/pybind/op_function_common.cc:737)

/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/math.py:218: ValueError
___________ test_metrics_rfloordiv[first_operand2-expected_result2] ____________

first_operand = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       5)
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)

    @pytest.mark.parametrize(
        ["first_operand", "expected_result"],
        [(5, tensor(2)), (5.0, tensor(2.0)), (tensor(5), tensor(2))],
    )
    @pytest.mark.skipif(**_MARK_TORCH_MIN_1_5)
    def test_metrics_rfloordiv(first_operand, expected_result):
        second_operand = DummyMetric(2)
    
>       final_rfloordiv = first_operand // second_operand

test_composition.py:342: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/dygraph/math_op_patch.py:257: in __impl__
    other_var = create_scalar(
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/dygraph/math_op_patch.py:90: in create_scalar
    return create_tensor(value, dtype, shape=[1])
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/decorator.py:232: in fun
    return caller(func, *(extras + args), **kw)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/dygraph/base.py:299: in __impl__
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

value = DummyMetric(), dtype = paddle.int32, shape = [1]

    @no_grad
    def create_tensor(value, dtype, shape):
        out = _varbase_creator(dtype=dtype)
>       out = _C_ops.fill_constant(out, 'dtype', dtype, 'shape', shape, 'value',
                                   value, 'force_cpu', False)
E       ValueError: (InvalidArgument) fill_constant(): argument (position 6) must be float, but got DummyMetric (at /Users/paddle/work/pengyuqi/Paddle/paddle/fluid/pybind/op_function_common.cc:189)

/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/dygraph/math_op_patch.py:84: ValueError
____________ test_metrics_rmatmul[first_operand0-expected_result0] _____________

first_operand = Tensor(shape=[3], dtype=int64, place=Place(cpu), stop_gradient=True,
       [2, 2, 2])
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       12)

    @pytest.mark.parametrize(
        ["first_operand", "expected_result"],
        [pytest.param(tensor([2, 2, 2]), tensor(12), marks=pytest.mark.skipif(**_MARK_TORCH_MIN_1_4))],
    )
    def test_metrics_rmatmul(first_operand, expected_result):
        second_operand = DummyMetric([2, 2, 2])
    
>       final_rmatmul = first_operand @ second_operand

test_composition.py:357: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/dygraph/math_op_patch.py:257: in __impl__
    other_var = create_scalar(
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/dygraph/math_op_patch.py:90: in create_scalar
    return create_tensor(value, dtype, shape=[1])
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/decorator.py:232: in fun
    return caller(func, *(extras + args), **kw)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/dygraph/base.py:299: in __impl__
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

value = DummyMetric(), dtype = paddle.int64, shape = [1]

    @no_grad
    def create_tensor(value, dtype, shape):
        out = _varbase_creator(dtype=dtype)
>       out = _C_ops.fill_constant(out, 'dtype', dtype, 'shape', shape, 'value',
                                   value, 'force_cpu', False)
E       ValueError: (InvalidArgument) fill_constant(): argument (position 6) must be float, but got DummyMetric (at /Users/paddle/work/pengyuqi/Paddle/paddle/fluid/pybind/op_function_common.cc:189)

/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/dygraph/math_op_patch.py:84: ValueError
______________ test_metrics_rmod[first_operand0-expected_result0] ______________

first_operand = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)

    @pytest.mark.parametrize(
        ["first_operand", "expected_result"],
        [pytest.param(tensor(2), tensor(2), marks=pytest.mark.skipif(**_MARK_TORCH_MIN_1_4))],
    )
    def test_metrics_rmod(first_operand, expected_result):
        second_operand = DummyMetric(5)
    
>       final_rmod = first_operand % second_operand

test_composition.py:372: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/dygraph/math_op_patch.py:257: in __impl__
    other_var = create_scalar(
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/dygraph/math_op_patch.py:90: in create_scalar
    return create_tensor(value, dtype, shape=[1])
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/decorator.py:232: in fun
    return caller(func, *(extras + args), **kw)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/dygraph/base.py:299: in __impl__
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

value = DummyMetric(), dtype = paddle.int32, shape = [1]

    @no_grad
    def create_tensor(value, dtype, shape):
        out = _varbase_creator(dtype=dtype)
>       out = _C_ops.fill_constant(out, 'dtype', dtype, 'shape', shape, 'value',
                                   value, 'force_cpu', False)
E       ValueError: (InvalidArgument) fill_constant(): argument (position 6) must be float, but got DummyMetric (at /Users/paddle/work/pengyuqi/Paddle/paddle/fluid/pybind/op_function_common.cc:189)

/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/dygraph/math_op_patch.py:84: ValueError
____________________ test_metrics_rpow[2-expected_result1] _____________________

first_operand = 2
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       4)

    @pytest.mark.parametrize(
        "first_operand,expected_result",
        [
            pytest.param(DummyMetric(2), tensor(4)),
            pytest.param(2, tensor(4)),
            pytest.param(2.0, tensor(4.0), marks=pytest.mark.skipif(**_MARK_TORCH_MIN_1_6)),
        ],
    )
    def test_metrics_rpow(first_operand, expected_result):
        second_operand = DummyMetric(2)
    
        final_rpow = first_operand ** second_operand
    
        assert isinstance(final_rpow, CompositionalMetric)
        final_rpow.update()
>       assert B.allclose(expected_result, final_rpow.compute())

test_composition.py:395: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:378: in wrapped_func
    self._computed = compute(*args, **kwargs)
../../paddlemetrics/metric.py:756: in compute
    return self.op(val_a, val_b)
../../../../../../torch2paddle/paddleext/torchapi/core.py:91: in paddle_func
    return func(*args, **kwargs)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/math.py:168: in pow
    return _elementwise_op_in_dygraph(
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/decorator.py:232: in fun
    return caller(func, *(extras + args), **kw)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/wrapped_decorator.py:25: in __impl__
    return wrapped_func(*args, **kwargs)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/framework.py:434: in __impl__
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = 2
y = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)
axis = -1, act = None, use_mkldnn = False, op_name = 'elementwise_pow'

    @dygraph_only
    def _elementwise_op_in_dygraph(x,
                                   y,
                                   axis=-1,
                                   act=None,
                                   use_mkldnn=False,
                                   op_name=None):
        def is_inplace(op_name):
            return  op_name[-1] == "_"
    
        if op_name not in OP_NAMEMAPPING.keys():
            op = getattr(_C_ops, op_name)
            out = op(x, y, 'axis', axis, 'use_mkldnn', use_mkldnn)
        else:
            if in_dygraph_mode():
                op = getattr(_C_ops, OP_NAMEMAPPING[op_name] if not is_inplace(op_name) else op_name)
                out = op(x, y)
    
            if _in_legacy_dygraph():
                op = getattr(_C_ops, op_name)
>               out = op(x, y, 'axis', axis, 'use_mkldnn', use_mkldnn)
E               ValueError: (InvalidArgument) elementwise_pow(): argument 'X' (position 0) must be Tensor, but got int (at /Users/paddle/work/pengyuqi/Paddle/paddle/fluid/pybind/op_function_common.cc:737)

/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/math.py:218: ValueError
___________________ test_metrics_rpow[2.0-expected_result2] ____________________

first_operand = 2.0
expected_result = Tensor(shape=[], dtype=float32, place=Place(cpu), stop_gradient=True,
       4.)

    @pytest.mark.parametrize(
        "first_operand,expected_result",
        [
            pytest.param(DummyMetric(2), tensor(4)),
            pytest.param(2, tensor(4)),
            pytest.param(2.0, tensor(4.0), marks=pytest.mark.skipif(**_MARK_TORCH_MIN_1_6)),
        ],
    )
    def test_metrics_rpow(first_operand, expected_result):
        second_operand = DummyMetric(2)
    
        final_rpow = first_operand ** second_operand
    
        assert isinstance(final_rpow, CompositionalMetric)
        final_rpow.update()
>       assert B.allclose(expected_result, final_rpow.compute())

test_composition.py:395: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:378: in wrapped_func
    self._computed = compute(*args, **kwargs)
../../paddlemetrics/metric.py:756: in compute
    return self.op(val_a, val_b)
../../../../../../torch2paddle/paddleext/torchapi/core.py:91: in paddle_func
    return func(*args, **kwargs)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/math.py:168: in pow
    return _elementwise_op_in_dygraph(
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/decorator.py:232: in fun
    return caller(func, *(extras + args), **kw)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/wrapped_decorator.py:25: in __impl__
    return wrapped_func(*args, **kwargs)
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/framework.py:434: in __impl__
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = 2.0
y = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)
axis = -1, act = None, use_mkldnn = False, op_name = 'elementwise_pow'

    @dygraph_only
    def _elementwise_op_in_dygraph(x,
                                   y,
                                   axis=-1,
                                   act=None,
                                   use_mkldnn=False,
                                   op_name=None):
        def is_inplace(op_name):
            return  op_name[-1] == "_"
    
        if op_name not in OP_NAMEMAPPING.keys():
            op = getattr(_C_ops, op_name)
            out = op(x, y, 'axis', axis, 'use_mkldnn', use_mkldnn)
        else:
            if in_dygraph_mode():
                op = getattr(_C_ops, OP_NAMEMAPPING[op_name] if not is_inplace(op_name) else op_name)
                out = op(x, y)
    
            if _in_legacy_dygraph():
                op = getattr(_C_ops, op_name)
>               out = op(x, y, 'axis', axis, 'use_mkldnn', use_mkldnn)
E               ValueError: (InvalidArgument) elementwise_pow(): argument 'X' (position 0) must be Tensor, but got float (at /Users/paddle/work/pengyuqi/Paddle/paddle/fluid/pybind/op_function_common.cc:737)

/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/math.py:218: ValueError
______________ test_metrics_rsub[first_operand0-expected_result0] ______________

first_operand = DummyMetric()
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       1)

    @pytest.mark.parametrize(
        ["first_operand", "expected_result"],
        [
            (DummyMetric(3), tensor(1)),
            (3, tensor(1)),
            (3.0, tensor(1.0)),
            pytest.param(tensor(3), tensor(1), marks=pytest.mark.skipif(**_MARK_TORCH_MIN_1_4)),
        ],
    )
    def test_metrics_rsub(first_operand, expected_result):
        second_operand = DummyMetric(2)
    
>       final_rsub = first_operand - second_operand

test_composition.py:410: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:666: in __sub__
    return CompositionalMetric(B.sub, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('sub',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'sub'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
____________________ test_metrics_rsub[3-expected_result1] _____________________

first_operand = 3
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       1)

    @pytest.mark.parametrize(
        ["first_operand", "expected_result"],
        [
            (DummyMetric(3), tensor(1)),
            (3, tensor(1)),
            (3.0, tensor(1.0)),
            pytest.param(tensor(3), tensor(1), marks=pytest.mark.skipif(**_MARK_TORCH_MIN_1_4)),
        ],
    )
    def test_metrics_rsub(first_operand, expected_result):
        second_operand = DummyMetric(2)
    
>       final_rsub = first_operand - second_operand

test_composition.py:410: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:657: in __rsub__
    return CompositionalMetric(B.sub, other, self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('sub',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'sub'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
___________________ test_metrics_rsub[3.0-expected_result2] ____________________

first_operand = 3.0
expected_result = Tensor(shape=[], dtype=float32, place=Place(cpu), stop_gradient=True,
       1.)

    @pytest.mark.parametrize(
        ["first_operand", "expected_result"],
        [
            (DummyMetric(3), tensor(1)),
            (3, tensor(1)),
            (3.0, tensor(1.0)),
            pytest.param(tensor(3), tensor(1), marks=pytest.mark.skipif(**_MARK_TORCH_MIN_1_4)),
        ],
    )
    def test_metrics_rsub(first_operand, expected_result):
        second_operand = DummyMetric(2)
    
>       final_rsub = first_operand - second_operand

test_composition.py:410: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:657: in __rsub__
    return CompositionalMetric(B.sub, other, self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('sub',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'sub'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
______________ test_metrics_rsub[first_operand3-expected_result3] ______________

first_operand = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       3)
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       1)

    @pytest.mark.parametrize(
        ["first_operand", "expected_result"],
        [
            (DummyMetric(3), tensor(1)),
            (3, tensor(1)),
            (3.0, tensor(1.0)),
            pytest.param(tensor(3), tensor(1), marks=pytest.mark.skipif(**_MARK_TORCH_MIN_1_4)),
        ],
    )
    def test_metrics_rsub(first_operand, expected_result):
        second_operand = DummyMetric(2)
    
        final_rsub = first_operand - second_operand
    
        assert isinstance(final_rsub, CompositionalMetric)
        final_rsub.update()
>       assert B.allclose(expected_result, final_rsub.compute())
E       assert Tensor(shape=[1], dtype=bool, place=Place(cpu), stop_gradient=True,\n       [False])
E        +  where Tensor(shape=[1], dtype=bool, place=Place(cpu), stop_gradient=True,\n       [False]) = <function allclose at 0x16b3abd30>(Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,\n       1), 5)
E        +    where <function allclose at 0x16b3abd30> = B.allclose
E        +    and   5 = <function CompositionalMetric.compute at 0x179d469d0>()
E        +      where <function CompositionalMetric.compute at 0x179d469d0> = CompositionalMetric(\n  add(\n    3,\n    DummyMetric()\n  )\n).compute

test_composition.py:414: AssertionError
____________ test_metrics_rtruediv[first_operand0-expected_result0] ____________

first_operand = DummyMetric()
expected_result = Tensor(shape=[], dtype=float32, place=Place(cpu), stop_gradient=True,
       2.)

    @pytest.mark.parametrize(
        ["first_operand", "expected_result"],
        [
            (DummyMetric(6), tensor(2.0)),
            (6, tensor(2.0)),
            (6.0, tensor(2.0)),
            (tensor(6), tensor(2.0)),
        ],
    )
    @pytest.mark.skipif(**_MARK_TORCH_MIN_1_5)
    def test_metrics_rtruediv(first_operand, expected_result):
        second_operand = DummyMetric(3)
    
>       final_rtruediv = first_operand / second_operand

test_composition.py:430: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:669: in __truediv__
    return CompositionalMetric(B.true_divide, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>
args = ('true_divide',), kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'true_divide'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
__________________ test_metrics_rtruediv[6-expected_result1] ___________________

first_operand = 6
expected_result = Tensor(shape=[], dtype=float32, place=Place(cpu), stop_gradient=True,
       2.)

    @pytest.mark.parametrize(
        ["first_operand", "expected_result"],
        [
            (DummyMetric(6), tensor(2.0)),
            (6, tensor(2.0)),
            (6.0, tensor(2.0)),
            (tensor(6), tensor(2.0)),
        ],
    )
    @pytest.mark.skipif(**_MARK_TORCH_MIN_1_5)
    def test_metrics_rtruediv(first_operand, expected_result):
        second_operand = DummyMetric(3)
    
>       final_rtruediv = first_operand / second_operand

test_composition.py:430: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:660: in __rtruediv__
    return CompositionalMetric(B.true_divide, other, self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>
args = ('true_divide',), kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'true_divide'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
_________________ test_metrics_rtruediv[6.0-expected_result2] __________________

first_operand = 6.0
expected_result = Tensor(shape=[], dtype=float32, place=Place(cpu), stop_gradient=True,
       2.)

    @pytest.mark.parametrize(
        ["first_operand", "expected_result"],
        [
            (DummyMetric(6), tensor(2.0)),
            (6, tensor(2.0)),
            (6.0, tensor(2.0)),
            (tensor(6), tensor(2.0)),
        ],
    )
    @pytest.mark.skipif(**_MARK_TORCH_MIN_1_5)
    def test_metrics_rtruediv(first_operand, expected_result):
        second_operand = DummyMetric(3)
    
>       final_rtruediv = first_operand / second_operand

test_composition.py:430: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:660: in __rtruediv__
    return CompositionalMetric(B.true_divide, other, self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>
args = ('true_divide',), kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'true_divide'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
____________ test_metrics_rtruediv[first_operand3-expected_result3] ____________

first_operand = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       6)
expected_result = Tensor(shape=[], dtype=float32, place=Place(cpu), stop_gradient=True,
       2.)

    @pytest.mark.parametrize(
        ["first_operand", "expected_result"],
        [
            (DummyMetric(6), tensor(2.0)),
            (6, tensor(2.0)),
            (6.0, tensor(2.0)),
            (tensor(6), tensor(2.0)),
        ],
    )
    @pytest.mark.skipif(**_MARK_TORCH_MIN_1_5)
    def test_metrics_rtruediv(first_operand, expected_result):
        second_operand = DummyMetric(3)
    
        final_rtruediv = first_operand / second_operand
    
        assert isinstance(final_rtruediv, CompositionalMetric)
        final_rtruediv.update()
>       assert B.allclose(expected_result, final_rtruediv.compute())
E       assert Tensor(shape=[1], dtype=bool, place=Place(cpu), stop_gradient=True,\n       [False])
E        +  where Tensor(shape=[1], dtype=bool, place=Place(cpu), stop_gradient=True,\n       [False]) = <function allclose at 0x16b3abd30>(Tensor(shape=[], dtype=float32, place=Place(cpu), stop_gradient=True,\n       2.), 9)
E        +    where <function allclose at 0x16b3abd30> = B.allclose
E        +    and   9 = <function CompositionalMetric.compute at 0x179d46c10>()
E        +      where <function CompositionalMetric.compute at 0x179d46c10> = CompositionalMetric(\n  add(\n    6,\n    DummyMetric()\n  )\n).compute

test_composition.py:434: AssertionError
______________ test_metrics_sub[second_operand0-expected_result0] ______________

second_operand = DummyMetric()
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       1)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(2), tensor(1)),
            (2, tensor(1)),
            (2.0, tensor(1.0)),
            (tensor(2), tensor(1)),
        ],
    )
    def test_metrics_sub(second_operand, expected_result):
        first_metric = DummyMetric(3)
    
>       final_sub = first_metric - second_operand

test_composition.py:449: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:666: in __sub__
    return CompositionalMetric(B.sub, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('sub',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'sub'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
_____________________ test_metrics_sub[2-expected_result1] _____________________

second_operand = 2
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       1)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(2), tensor(1)),
            (2, tensor(1)),
            (2.0, tensor(1.0)),
            (tensor(2), tensor(1)),
        ],
    )
    def test_metrics_sub(second_operand, expected_result):
        first_metric = DummyMetric(3)
    
>       final_sub = first_metric - second_operand

test_composition.py:449: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:666: in __sub__
    return CompositionalMetric(B.sub, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('sub',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'sub'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
____________________ test_metrics_sub[2.0-expected_result2] ____________________

second_operand = 2.0
expected_result = Tensor(shape=[], dtype=float32, place=Place(cpu), stop_gradient=True,
       1.)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(2), tensor(1)),
            (2, tensor(1)),
            (2.0, tensor(1.0)),
            (tensor(2), tensor(1)),
        ],
    )
    def test_metrics_sub(second_operand, expected_result):
        first_metric = DummyMetric(3)
    
>       final_sub = first_metric - second_operand

test_composition.py:449: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:666: in __sub__
    return CompositionalMetric(B.sub, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('sub',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'sub'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
______________ test_metrics_sub[second_operand3-expected_result3] ______________

second_operand = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       1)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(2), tensor(1)),
            (2, tensor(1)),
            (2.0, tensor(1.0)),
            (tensor(2), tensor(1)),
        ],
    )
    def test_metrics_sub(second_operand, expected_result):
        first_metric = DummyMetric(3)
    
>       final_sub = first_metric - second_operand

test_composition.py:449: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:666: in __sub__
    return CompositionalMetric(B.sub, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>, args = ('sub',)
kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'sub'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
____________ test_metrics_truediv[second_operand0-expected_result0] ____________

second_operand = DummyMetric()
expected_result = Tensor(shape=[], dtype=float32, place=Place(cpu), stop_gradient=True,
       2.)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(3), tensor(2.0)),
            (3, tensor(2.0)),
            (3.0, tensor(2.0)),
            (tensor(3), tensor(2.0)),
        ],
    )
    @pytest.mark.skipif(**_MARK_TORCH_MIN_1_5)
    def test_metrics_truediv(second_operand, expected_result):
        first_metric = DummyMetric(6)
    
>       final_truediv = first_metric / second_operand

test_composition.py:469: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:669: in __truediv__
    return CompositionalMetric(B.true_divide, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>
args = ('true_divide',), kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'true_divide'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
___________________ test_metrics_truediv[3-expected_result1] ___________________

second_operand = 3
expected_result = Tensor(shape=[], dtype=float32, place=Place(cpu), stop_gradient=True,
       2.)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(3), tensor(2.0)),
            (3, tensor(2.0)),
            (3.0, tensor(2.0)),
            (tensor(3), tensor(2.0)),
        ],
    )
    @pytest.mark.skipif(**_MARK_TORCH_MIN_1_5)
    def test_metrics_truediv(second_operand, expected_result):
        first_metric = DummyMetric(6)
    
>       final_truediv = first_metric / second_operand

test_composition.py:469: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:669: in __truediv__
    return CompositionalMetric(B.true_divide, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>
args = ('true_divide',), kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'true_divide'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
__________________ test_metrics_truediv[3.0-expected_result2] __________________

second_operand = 3.0
expected_result = Tensor(shape=[], dtype=float32, place=Place(cpu), stop_gradient=True,
       2.)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(3), tensor(2.0)),
            (3, tensor(2.0)),
            (3.0, tensor(2.0)),
            (tensor(3), tensor(2.0)),
        ],
    )
    @pytest.mark.skipif(**_MARK_TORCH_MIN_1_5)
    def test_metrics_truediv(second_operand, expected_result):
        first_metric = DummyMetric(6)
    
>       final_truediv = first_metric / second_operand

test_composition.py:469: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:669: in __truediv__
    return CompositionalMetric(B.true_divide, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>
args = ('true_divide',), kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'true_divide'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
____________ test_metrics_truediv[second_operand3-expected_result3] ____________

second_operand = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       3)
expected_result = Tensor(shape=[], dtype=float32, place=Place(cpu), stop_gradient=True,
       2.)

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [
            (DummyMetric(3), tensor(2.0)),
            (3, tensor(2.0)),
            (3.0, tensor(2.0)),
            (tensor(3), tensor(2.0)),
        ],
    )
    @pytest.mark.skipif(**_MARK_TORCH_MIN_1_5)
    def test_metrics_truediv(second_operand, expected_result):
        first_metric = DummyMetric(6)
    
>       final_truediv = first_metric / second_operand

test_composition.py:469: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../paddlemetrics/metric.py:669: in __truediv__
    return CompositionalMetric(B.true_divide, self, other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paddleext.torchapi.ModuleProxy object at 0x130bfa040>
args = ('true_divide',), kwargs = {}

    def __getattribute__(self, *args, **kwargs):
        # Perform custom logic here
    
>       obj = object.__getattribute__(this_module, *args, **kwargs)
E       AttributeError: 'module' object has no attribute 'true_divide'

../../../../../../torch2paddle/paddleext/torchapi/__init__.py:20: AttributeError
______________ test_metrics_xor[second_operand1-expected_result1] ______________

second_operand = Tensor(shape=[3], dtype=int64, place=Place(cpu), stop_gradient=True,
       [1, 0, 3])
expected_result = Tensor(shape=[3], dtype=int64, place=Place(cpu), stop_gradient=True,
       [-2, -2,  0])

    @pytest.mark.parametrize(
        ["second_operand", "expected_result"],
        [(DummyMetric([1, 0, 3]), tensor([-2, -2, 0])), (tensor([1, 0, 3]), tensor([-2, -2, 0]))],
    )
    @pytest.mark.skipif(**_MARK_TORCH_MIN_1_5)
    def test_metrics_xor(second_operand, expected_result):
        first_metric = DummyMetric([-1, -2, 3])
    
        final_xor = first_metric ^ second_operand
>       final_rxor = second_operand ^ first_metric

test_composition.py:485: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/logic.py:616: in bitwise_xor
    return _bitwise_op(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op_name = 'bitwise_xor'
x = Tensor(shape=[3], dtype=int64, place=Place(cpu), stop_gradient=True,
       [1, 0, 3])
y = DummyMetric(), out = None, name = None, binary_op = True

    def _bitwise_op(op_name, x, y, out=None, name=None, binary_op=True):
        if paddle.in_dynamic_mode():
            op = getattr(_C_ops, op_name)
            if binary_op:
>               return op(x, y)
E               ValueError: (InvalidArgument) bitwise_xor(): argument 'Y' (position 1) must be Tensor, but got DummyMetric (at /Users/paddle/work/pengyuqi/Paddle/paddle/fluid/pybind/op_function_common.cc:737)

/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/logic.py:505: ValueError
_______________ test_metrics_getitem[value0-1-expected_result0] ________________

value = [1, 2, 3], idx = 1
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)

    @pytest.mark.parametrize(
        ["value", "idx", "expected_result"],
        [([1, 2, 3], 1, tensor(2)), ([[0, 1], [2, 3]], (1, 0), tensor(2)), ([[0, 1], [2, 3]], 1, tensor([2, 3]))],
    )
    def test_metrics_getitem(value, idx, expected_result):
        first_metric = DummyMetric(value)
    
        final_getitem = first_metric[idx]
        assert isinstance(final_getitem, CompositionalMetric)
        final_getitem.update()
>       assert B.allclose(expected_result, final_getitem.compute())

test_composition.py:543: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../../../torch2paddle/paddleext/torchapi/functional.py:308: in allclose
    return paddle.allclose(input.float(), other.float(), rtol=rtol, atol=atol, equal_nan=equal_nan, name=name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = Tensor(shape=[], dtype=float32, place=Place(cpu), stop_gradient=True,
       2.)
y = Tensor(shape=[1], dtype=float32, place=Place(cpu), stop_gradient=True,
       [2.])
rtol = 1e-05, atol = 1e-08, equal_nan = False, name = None

    @templatedoc()
    def allclose(x, y, rtol=1e-05, atol=1e-08, equal_nan=False, name=None):
        """
        ${comment}
    
        Args:
            x(Tensor): ${input_comment}.
            y(Tensor): ${other_comment}.
            rtol(rtoltype, optional): The relative tolerance. Default: :math:`1e-5` .
            atol(atoltype, optional): The absolute tolerance. Default: :math:`1e-8` .
            equal_nan(equalnantype, optional): ${equal_nan_comment}.
            name (str, optional): Name for the operation. For more information, please
                refer to :ref:`api_guide_Name`. Default: None.
    
        Returns:
            Tensor: ${out_comment}.
    
        Raises:
            TypeError: The data type of ``x`` must be one of float32, float64.
            TypeError: The data type of ``y`` must be one of float32, float64.
            TypeError: The type of ``rtol`` must be float.
            TypeError: The type of ``atol`` must be float.
            TypeError: The type of ``equal_nan`` must be bool.
    
        Examples:
            .. code-block:: python
    
              import paddle
    
              x = paddle.to_tensor([10000., 1e-07])
              y = paddle.to_tensor([10000.1, 1e-08])
              result1 = paddle.allclose(x, y, rtol=1e-05, atol=1e-08,
                                      equal_nan=False, name="ignore_nan")
              np_result1 = result1.numpy()
              # [False]
              result2 = paddle.allclose(x, y, rtol=1e-05, atol=1e-08,
                                          equal_nan=True, name="equal_nan")
              np_result2 = result2.numpy()
              # [False]
    
              x = paddle.to_tensor([1.0, float('nan')])
              y = paddle.to_tensor([1.0, float('nan')])
              result1 = paddle.allclose(x, y, rtol=1e-05, atol=1e-08,
                                      equal_nan=False, name="ignore_nan")
              np_result1 = result1.numpy()
              # [False]
              result2 = paddle.allclose(x, y, rtol=1e-05, atol=1e-08,
                                          equal_nan=True, name="equal_nan")
              np_result2 = result2.numpy()
              # [True]
        """
    
        if in_dygraph_mode():
            # NOTE(dev): Pass tol as Tensor to fix precision loss problem, because
            # C++ backend will cast it into float32 if passing float from python.
            as_tensor = lambda x: paddle.to_tensor([x], dtype='float64', place='cpu')
            return _C_ops.final_state_allclose(x, y,
                                               as_tensor(rtol),
                                               as_tensor(atol), equal_nan)
        if _in_legacy_dygraph():
>           return _C_ops.allclose(x, y, 'rtol',
                                   str(rtol), 'atol',
                                   str(atol), 'equal_nan', equal_nan)
E           RuntimeError: (PreconditionNotMet) Input(Input) and Input(Other) must have the same dimension size.
E             [Hint: Expected input_dim.size() == other_dim.size(), but received input_dim.size():0 != other_dim.size():1.] (at /Users/paddle/work/pengyuqi/Paddle/paddle/phi/infermeta/binary.cc:39)
E             [operator < allclose > error]

/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/logic.py:140: RuntimeError
______________ test_metrics_getitem[value1-idx1-expected_result1] ______________

value = [[0, 1], [2, 3]], idx = (1, 0)
expected_result = Tensor(shape=[], dtype=int32, place=Place(cpu), stop_gradient=True,
       2)

    @pytest.mark.parametrize(
        ["value", "idx", "expected_result"],
        [([1, 2, 3], 1, tensor(2)), ([[0, 1], [2, 3]], (1, 0), tensor(2)), ([[0, 1], [2, 3]], 1, tensor([2, 3]))],
    )
    def test_metrics_getitem(value, idx, expected_result):
        first_metric = DummyMetric(value)
    
        final_getitem = first_metric[idx]
        assert isinstance(final_getitem, CompositionalMetric)
        final_getitem.update()
>       assert B.allclose(expected_result, final_getitem.compute())

test_composition.py:543: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../../../torch2paddle/paddleext/torchapi/functional.py:308: in allclose
    return paddle.allclose(input.float(), other.float(), rtol=rtol, atol=atol, equal_nan=equal_nan, name=name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = Tensor(shape=[], dtype=float32, place=Place(cpu), stop_gradient=True,
       2.)
y = Tensor(shape=[1], dtype=float32, place=Place(cpu), stop_gradient=True,
       [2.])
rtol = 1e-05, atol = 1e-08, equal_nan = False, name = None

    @templatedoc()
    def allclose(x, y, rtol=1e-05, atol=1e-08, equal_nan=False, name=None):
        """
        ${comment}
    
        Args:
            x(Tensor): ${input_comment}.
            y(Tensor): ${other_comment}.
            rtol(rtoltype, optional): The relative tolerance. Default: :math:`1e-5` .
            atol(atoltype, optional): The absolute tolerance. Default: :math:`1e-8` .
            equal_nan(equalnantype, optional): ${equal_nan_comment}.
            name (str, optional): Name for the operation. For more information, please
                refer to :ref:`api_guide_Name`. Default: None.
    
        Returns:
            Tensor: ${out_comment}.
    
        Raises:
            TypeError: The data type of ``x`` must be one of float32, float64.
            TypeError: The data type of ``y`` must be one of float32, float64.
            TypeError: The type of ``rtol`` must be float.
            TypeError: The type of ``atol`` must be float.
            TypeError: The type of ``equal_nan`` must be bool.
    
        Examples:
            .. code-block:: python
    
              import paddle
    
              x = paddle.to_tensor([10000., 1e-07])
              y = paddle.to_tensor([10000.1, 1e-08])
              result1 = paddle.allclose(x, y, rtol=1e-05, atol=1e-08,
                                      equal_nan=False, name="ignore_nan")
              np_result1 = result1.numpy()
              # [False]
              result2 = paddle.allclose(x, y, rtol=1e-05, atol=1e-08,
                                          equal_nan=True, name="equal_nan")
              np_result2 = result2.numpy()
              # [False]
    
              x = paddle.to_tensor([1.0, float('nan')])
              y = paddle.to_tensor([1.0, float('nan')])
              result1 = paddle.allclose(x, y, rtol=1e-05, atol=1e-08,
                                      equal_nan=False, name="ignore_nan")
              np_result1 = result1.numpy()
              # [False]
              result2 = paddle.allclose(x, y, rtol=1e-05, atol=1e-08,
                                          equal_nan=True, name="equal_nan")
              np_result2 = result2.numpy()
              # [True]
        """
    
        if in_dygraph_mode():
            # NOTE(dev): Pass tol as Tensor to fix precision loss problem, because
            # C++ backend will cast it into float32 if passing float from python.
            as_tensor = lambda x: paddle.to_tensor([x], dtype='float64', place='cpu')
            return _C_ops.final_state_allclose(x, y,
                                               as_tensor(rtol),
                                               as_tensor(atol), equal_nan)
        if _in_legacy_dygraph():
>           return _C_ops.allclose(x, y, 'rtol',
                                   str(rtol), 'atol',
                                   str(atol), 'equal_nan', equal_nan)
E           RuntimeError: (PreconditionNotMet) Input(Input) and Input(Other) must have the same dimension size.
E             [Hint: Expected input_dim.size() == other_dim.size(), but received input_dim.size():0 != other_dim.size():1.] (at /Users/paddle/work/pengyuqi/Paddle/paddle/phi/infermeta/binary.cc:39)
E             [operator < allclose > error]

/Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/logic.py:140: RuntimeError
=============================== warnings summary ===============================
../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:19
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:19: DeprecationWarning: Call to deprecated create function FileDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    DESCRIPTOR = _descriptor.FileDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:33
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:33: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:37
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:37: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:41
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:41: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:45
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:45: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:49
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:49: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:53
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:53: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:57
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:57: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:61
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:61: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:65
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:65: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:69
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:69: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:73
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:73: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:77
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:77: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:81
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:81: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:27
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:27: DeprecationWarning: Call to deprecated create function EnumDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _ATTRTYPE = _descriptor.EnumDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:115
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:115: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:119
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:119: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:123
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:123: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:127
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:127: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:131
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:131: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:135
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:135: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:139
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:139: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:143
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:143: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:147
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:147: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:151
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:151: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:155
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:155: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:159
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:159: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:163
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:163: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:167
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:167: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:171
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:171: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:175
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:175: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:179
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:179: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:183
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:183: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:187
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:187: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:191
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:191: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:195
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:195: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:199
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:199: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:203
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:203: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:207
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:207: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:211
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:211: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:215
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:215: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:219
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:219: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:223
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:223: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:227
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:227: DeprecationWarning: Call to deprecated create function EnumValueDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.EnumValueDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:109
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:109: DeprecationWarning: Call to deprecated create function EnumDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _VARTYPE_TYPE = _descriptor.EnumDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:247
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:247: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:240
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:240: DeprecationWarning: Call to deprecated create function Descriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _VERSION = _descriptor.Descriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:278
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:278: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:285
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:285: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:292
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:292: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:299
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:299: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:271
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:271: DeprecationWarning: Call to deprecated create function Descriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _PROCESSMESHDESC = _descriptor.Descriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:330
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:330: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:337
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:337: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:344
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:344: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:351
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:351: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:358
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:358: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:365
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:365: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:372
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:372: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:379
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:379: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:386
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:386: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:393
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:393: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:400
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:400: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:407
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:407: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:414
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:414: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:421
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:421: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:428
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:428: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:323
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:323: DeprecationWarning: Call to deprecated create function Descriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _OPDESC_ATTR = _descriptor.Descriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:458
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:458: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:465
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:465: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:451
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:451: DeprecationWarning: Call to deprecated create function Descriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _OPDESC_VAR = _descriptor.Descriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:495
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:495: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:502
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:502: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:509
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:509: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:516
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:516: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:523
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:523: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:488
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:488: DeprecationWarning: Call to deprecated create function Descriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _OPDESC = _descriptor.Descriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:554
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:554: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:561
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:561: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:568
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:568: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:575
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:575: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:582
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:582: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:589
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:589: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:596
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:596: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:547
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:547: DeprecationWarning: Call to deprecated create function Descriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _OPPROTO_VAR = _descriptor.Descriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:626
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:626: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:633
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:633: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:640
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:640: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:647
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:647: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:654
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:654: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:661
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:661: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:619
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:619: DeprecationWarning: Call to deprecated create function Descriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _OPPROTO_ATTR = _descriptor.Descriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:691
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:691: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:698
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:698: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:705
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:705: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:712
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:712: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:719
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:719: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:684
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:684: DeprecationWarning: Call to deprecated create function Descriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _OPPROTO = _descriptor.Descriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:750
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:750: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:757
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/proto/framework_pb2.py:757: DeprecationWarning: Call to deprecated create function FieldDescriptor(). Note: Create unlinked descriptors is going to go away. Please use get/find descriptors from generated code or query the descriptor_pool.
    _descriptor.FieldDescriptor(

../../../../../../../.envs/oix/lib/python3.8/site-packages/comet_ml/monkey_patching.py:19
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/comet_ml/monkey_patching.py:19: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    import imp

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/fluid/framework.py:1104
test_composition.py::test_metrics_and[second_operand3-expected_result3]
test_composition.py::test_metrics_or[second_operand1-expected_result1]
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/framework.py:1104: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    elif dtype == np.bool:

../../../../../../../.envs/oix/lib/python3.8/site-packages/paddle/tensor/creation.py:125: 1 warning
test_composition.py: 10 warnings
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/tensor/creation.py:125: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    if data.dtype == np.object:

test_composition.py::test_metrics_eq[2.0-expected_result2]
test_composition.py::test_metrics_ge[2.0-expected_result2]
test_composition.py::test_metrics_gt[2.0-expected_result2]
test_composition.py::test_metrics_le[2.0-expected_result2]
test_composition.py::test_metrics_lt[2.0-expected_result2]
  /Users/sun/Projects/.envs/oix/lib/python3.8/site-packages/paddle/fluid/dygraph/math_op_patch.py:276: UserWarning: The dtype of left and right variables are not the same, left dtype is paddle.int32, but right dtype is paddle.float32, the right dtype will convert to paddle.int32
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED test_composition.py::test_metrics_and[3-expected_result1] - ValueError...
FAILED test_composition.py::test_metrics_and[3-expected_result2] - ValueError...
FAILED test_composition.py::test_metrics_and[second_operand3-expected_result3]
FAILED test_composition.py::test_metrics_floordiv[2-expected_result1] - Value...
FAILED test_composition.py::test_metrics_floordiv[2.0-expected_result2] - Val...
FAILED test_composition.py::test_metrics_matmul[second_operand0-expected_result0]
FAILED test_composition.py::test_metrics_matmul[second_operand1-expected_result1]
FAILED test_composition.py::test_metrics_mod[second_operand0-expected_result0]
FAILED test_composition.py::test_metrics_mod[2-expected_result1] - AttributeE...
FAILED test_composition.py::test_metrics_mod[2.0-expected_result2] - Attribut...
FAILED test_composition.py::test_metrics_mod[second_operand3-expected_result3]
FAILED test_composition.py::test_metrics_mul[second_operand0-expected_result0]
FAILED test_composition.py::test_metrics_mul[2-expected_result1] - AttributeE...
FAILED test_composition.py::test_metrics_mul[2.0-expected_result2] - Attribut...
FAILED test_composition.py::test_metrics_mul[second_operand3-expected_result3]
FAILED test_composition.py::test_metrics_ne[second_operand0-expected_result0]
FAILED test_composition.py::test_metrics_ne[2-expected_result1] - AttributeEr...
FAILED test_composition.py::test_metrics_ne[2.0-expected_result2] - Attribute...
FAILED test_composition.py::test_metrics_ne[second_operand3-expected_result3]
FAILED test_composition.py::test_metrics_or[second_operand1-expected_result1]
FAILED test_composition.py::test_metrics_rfloordiv[5-expected_result0] - Valu...
FAILED test_composition.py::test_metrics_rfloordiv[5.0-expected_result1] - Va...
FAILED test_composition.py::test_metrics_rfloordiv[first_operand2-expected_result2]
FAILED test_composition.py::test_metrics_rmatmul[first_operand0-expected_result0]
FAILED test_composition.py::test_metrics_rmod[first_operand0-expected_result0]
FAILED test_composition.py::test_metrics_rpow[2-expected_result1] - ValueErro...
FAILED test_composition.py::test_metrics_rpow[2.0-expected_result2] - ValueEr...
FAILED test_composition.py::test_metrics_rsub[first_operand0-expected_result0]
FAILED test_composition.py::test_metrics_rsub[3-expected_result1] - Attribute...
FAILED test_composition.py::test_metrics_rsub[3.0-expected_result2] - Attribu...
FAILED test_composition.py::test_metrics_rsub[first_operand3-expected_result3]
FAILED test_composition.py::test_metrics_rtruediv[first_operand0-expected_result0]
FAILED test_composition.py::test_metrics_rtruediv[6-expected_result1] - Attri...
FAILED test_composition.py::test_metrics_rtruediv[6.0-expected_result2] - Att...
FAILED test_composition.py::test_metrics_rtruediv[first_operand3-expected_result3]
FAILED test_composition.py::test_metrics_sub[second_operand0-expected_result0]
FAILED test_composition.py::test_metrics_sub[2-expected_result1] - AttributeE...
FAILED test_composition.py::test_metrics_sub[2.0-expected_result2] - Attribut...
FAILED test_composition.py::test_metrics_sub[second_operand3-expected_result3]
FAILED test_composition.py::test_metrics_truediv[second_operand0-expected_result0]
FAILED test_composition.py::test_metrics_truediv[3-expected_result1] - Attrib...
FAILED test_composition.py::test_metrics_truediv[3.0-expected_result2] - Attr...
FAILED test_composition.py::test_metrics_truediv[second_operand3-expected_result3]
FAILED test_composition.py::test_metrics_xor[second_operand1-expected_result1]
FAILED test_composition.py::test_metrics_getitem[value0-1-expected_result0]
FAILED test_composition.py::test_metrics_getitem[value1-idx1-expected_result1]
================= 46 failed, 40 passed, 120 warnings in 2.37s ==================
